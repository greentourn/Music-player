const socket = io();
let player;  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö YouTube player instance
let currentPlayingIndex = -1;
let isSongPlaying = false;
const apiKey = 'AIzaSyB9lB2v1PLpfilw_a5dEqfD-yw3WNhtxE4';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ YouTube IFrame Player API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
function onYouTubeIframeAPIReady() {
  player = new YT.Player('player', {
    height: '480px',
    width: '100%',
    videoId: '',  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    }
  });
}

function fetchVideoDetails(videoId, callback, errorCallback) {
    const url = `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${apiKey}`;
  
    fetch(url)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.items && data.items.length > 0) {
          const video = data.items[0].snippet;
          const videoDetails = {
            title: video.title,
            thumbnail: video.thumbnails.default.url
          };
          callback(videoDetails);
        } else {
          throw new Error('Video not found');
        }
      })
      .catch(error => {
        console.error('Error fetching video details:', error);
        errorCallback(error);
      });
  }
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ player ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
function onPlayerReady(event) {
  playNextSong();  // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á player ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ
function onPlayerStateChange(event) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏ö ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
  if (event.data == YT.PlayerState.ENDED && isSongPlaying) {
    isSongPlaying = false;  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    skipSong();  // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
function playNextSong() {
  if (songQueue.length > 1) {
    // ‡∏Ñ‡∏¥‡∏ß‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÄ‡∏û‡∏•‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    currentPlayingIndex = (currentPlayingIndex + 1) % songQueue.length;
    const nextSong = songQueue[currentPlayingIndex];
    const videoId = extractVideoId(nextSong);
    player.loadVideoById(videoId);
    isSongPlaying = true;
  } else if (songQueue.length === 1) {
    // ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    const nextSong = songQueue[0];
    const videoId = extractVideoId(nextSong);
    player.loadVideoById(videoId);
    isSongPlaying = true;
  } else {
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
    isSongPlaying = false;
    currentPlayingIndex = -1;
    player.stopVideo();
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏ß‡πà‡∏≤‡∏á
function addSong() {
  const songInput = document.getElementById('songInput');
  const song = songInput.value;
  if (song) {
    socket.emit('addSong', song);
    songInput.value = '';
    if (songQueue.length === 0) {  // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
        if (songQueue.length === 1) {
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏£‡∏Å
            playNextSong();
        }  else {
        queueUpdated();  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏£‡∏Å
        }
      
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á
function skipSong() {
  currentPlayingIndex = -1; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á
  isSongPlaying = false;  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á
  socket.emit('skipSong');
  if (songQueue.length > 0) {
    songQueue.shift();  // ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
    socket.emit('queueUpdated', songQueue);
    playNextSong();  // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
  } else {
    isSongPlaying = false;  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
    player.stopVideo();  // ‡∏´‡∏¢‡∏∏‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
  }
}

function removeSong(index) {
  // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  if (songQueue.length === 1 && index === currentPlayingIndex) {
    // ‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á ‡πÅ‡∏Ñ‡πà‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
    socket.emit('removeSong', index);
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å playNextSong() ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  } else if (index !== currentPlayingIndex) {
    // ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà
    socket.emit('removeSong', index);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï currentPlayingIndex ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (index < currentPlayingIndex) {
      currentPlayingIndex--;
    }
  }
}

function moveSong(fromIndex, toIndex) {
  socket.emit('moveSong', fromIndex, toIndex);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Video ID ‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube
function extractVideoId(url) {
  const videoIdMatch = url.match(/(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/);
  return videoIdMatch ? videoIdMatch[1] : null;
}


socket.on('queueUpdated', (queue) => {
    songQueue = queue;
    const queueList = document.getElementById('queue');
    queueList.innerHTML = '';
  
    queue.forEach((song, index) => {
      // ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å UI
      if (index === currentPlayingIndex || (currentPlayingIndex === -1 && index === 0)) {
        return;
      }
      const listItem = document.createElement('div');
      listItem.className = 'list-group-item song-item';
      
      // ‡∏î‡∏∂‡∏á videoId ‡∏à‡∏≤‡∏Å URL ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ
      const videoId = extractVideoId(song);
  
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Loading Indicator
      const loadingIndicator = document.createElement('div');
      loadingIndicator.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...';
      loadingIndicator.className = 'spinner-border text-primary';
      listItem.appendChild(loadingIndicator);
  
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° listItem ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô queueList ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô Loading Indicator
      queueList.appendChild(listItem);
  
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å YouTube API
      fetchVideoDetails(
        videoId,
        (videoDetails) => {
          // ‡∏•‡∏ö Loading Indicator
          listItem.removeChild(loadingIndicator);
  
          const title = videoDetails.title;
          const thumbnail = videoDetails.thumbnail;
  
          const thumbnailImg = document.createElement('img');
          thumbnailImg.src = thumbnail;
          thumbnailImg.alt = title;
          thumbnailImg.className = 'me-3';
  
          const titleText = document.createElement('span');
          titleText.textContent = title;
          titleText.className = 'd-flex';
  
          const controlsElement = document.createElement('div');
          controlsElement.className = 'song-controls';

          const upButton = document.createElement('button');
          upButton.textContent = '‚¨ÜÔ∏è';
          upButton.className = 'btn btn-secondary btn-sm ms-2';
          upButton.disabled = index <= 1;
          if (index > 1) {
            upButton.onclick = () => moveSong(index, index - 1);
          }
  
          const downButton = document.createElement('button');
          downButton.textContent = '‚¨áÔ∏è';
          downButton.className = 'btn btn-secondary btn-sm ms-2';
          downButton.disabled = index >= queue.length - 1;
          if (index < queue.length - 1) {
            downButton.onclick = () => moveSong(index, index + 1);
          }

          const removeButton = document.createElement('button');
          removeButton.textContent = 'üóëÔ∏è';
          removeButton.className = 'btn btn-danger btn-sm ms-2';
          removeButton.onclick = () => removeSong(index);
  
          controlsElement.appendChild(upButton);
          controlsElement.appendChild(downButton);
          controlsElement.appendChild(removeButton);
  
          listItem.appendChild(thumbnailImg);
          listItem.appendChild(titleText);
          listItem.appendChild(controlsElement);
        },
        (error) => {
          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
          listItem.removeChild(loadingIndicator);
          const errorText = document.createElement('span');
          errorText.textContent = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ';
          errorText.className = 'text-danger';
          listItem.appendChild(errorText);
          socket.emit('removeSong', index);
        }
      );
    });
  
    if (songQueue.length === 1) {  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      playNextSong();
    }
  });
